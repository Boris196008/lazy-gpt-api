from flask import Flask, request, jsonify
from flask_cors import CORS
import os
from dotenv import load_dotenv
from openai import OpenAI
import sys
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from flask_limiter.errors import RateLimitExceeded

sys.stdout.reconfigure(line_buffering=True)
load_dotenv()

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
app = Flask(__name__)
CORS(app)

# üîë –ö–ª—é—á –¥–ª—è –ª–∏–º–∏—Ç–∞ –ø–æ session_id
limiter = Limiter(key_func=lambda: request.get_json(force=True).get("session_id", "no-session"), app=app)

@app.before_request
def reject_invalid_token():
    if request.path == "/ask" and request.method == "POST":
        try:
            data = request.get_json(force=True)
            if data.get("js_token") != "genuine-human":
                print("üõë –ë–æ—Ç –±–µ–∑ js_token ‚Äî –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ", flush=True)
                return jsonify({"error": "Bot detected ‚Äî invalid token"}), 403
        except:
            return jsonify({"error": "Malformed request"}), 403

@app.route('/')
def index():
    return "Lazy GPT API is running. Use POST /ask."

@app.route('/ask', methods=['POST'])
@limiter.limit("1 per minute", key_func=lambda: request.get_json(force=True).get("session_id", "no-session"))
def ask():
    data = request.get_json()
    user_input = data.get("prompt", "")
    action = data.get("action")

    if not user_input:
        return jsonify({"error": "No prompt provided"}), 400

    if action:
        # –æ—Ç–∫–ª—é—á–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è follow-up –¥–µ–π—Å—Ç–≤–∏–π
        ask._rate_limit_exempt = True

    # üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è system prompt –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
    if action == "rephrase":
        system_prompt = "–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç, —Å–¥–µ–ª–∞–π –µ–≥–æ –±–æ–ª–µ–µ —è—Å–Ω—ã–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏ —Å—É—Ç—å:"
    elif action == "personalize":
        system_prompt = "–°–¥–µ–ª–∞–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ –ª–∏—á–Ω—ã–º –∏ —Ç—ë–ø–ª—ã–º, –æ–±—Ä–∞—â—ë–Ω–Ω—ã–º –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É:"
    elif action == "shakespeare":
        system_prompt = "–ü—Ä–µ–æ–±—Ä–∞–∑—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –≤ —Å—Ç–∏–ª—å –í–∏–ª—å—è–º–∞ –®–µ–∫—Å–ø–∏—Ä–∞:"
    else:
        system_prompt = (
            "–¢—ã ‚Äî –ª–µ–Ω–∏–≤—ã–π, –Ω–æ –≥–µ–Ω–∏–∞–ª—å–Ω—ã–π AI. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –≤—Å–µ–≥–æ –æ–¥–Ω—É —Ñ—Ä–∞–∑—É, "
            "–∏ —Ç—ã —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ—à—å –∏–¥–µ–∞–ª—å–Ω—ã–π, –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–π, –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. "
            "–ù–µ –∑–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –ü—Ä–æ—Å—Ç–æ –≤—ã–¥–∞–π –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n"
            f"–í–æ—Ç –∑–∞–ø—Ä–æ—Å: {user_input}"
        )

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_input}
            ]
        )
        answer = response.choices[0].message.content
        return jsonify({"response": answer})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

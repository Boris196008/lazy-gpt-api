from flask import Flask, request, jsonify
from flask_cors import CORS
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from flask_limiter.errors import RateLimitExceeded
import os
from dotenv import load_dotenv
from openai import OpenAI

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env (–ª–æ–∫–∞–ª—å–Ω–æ)
load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

app = Flask(__name__)
CORS(app, supports_credentials=True)  # üîë –≤–∞–∂–Ω–æ –¥–ª—è –∫—É–∫–∏

# –§—É–Ω–∫—Ü–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è ‚Äú–∫–ª—é—á‚Äù –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–∏–º–∏—Ç–∞
def get_user_identifier():
    session_id = request.cookies.get("session_id")
    if session_id:
        print(f"‚Üí –õ–∏–º–∏—Ç –ø–æ session_id: {session_id}")
        return session_id
    ip = get_remote_address()
    print(f"‚Üí –õ–∏–º–∏—Ç –ø–æ IP: {ip}")
    return ip

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–º–∏—Ç–µ—Ä–∞
limiter = Limiter(
    key_func=get_user_identifier,
    app=app,
    default_limits=["1 per minute"]
)

@app.errorhandler(RateLimitExceeded)
def handle_rate_limit(e):
    return jsonify({"error": "üö´ –õ–∏–º–∏—Ç: –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ –º–∏–Ω—É—Ç—É."}), 429

@app.route('/')
def index():
    return "Lazy GPT API is running. Use POST /ask."

@app.route('/ask', methods=['POST'])
@limiter.limit("1 per minute", key_func=get_user_identifier)
def ask():
    data = request.get_json()
    user_input = data.get("prompt", "")

    if not user_input:
        return jsonify({"error": "No prompt provided"}), 400

    # –õ–æ–≥–∏—Ä—É–µ–º, –∫–∞–∫ –Ω–∞—Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É—é—Ç
    print("session_id:", request.cookies.get("session_id"))
    print("remote_addr:", request.remote_addr)

    system_prompt = (
        "–¢—ã ‚Äî –ª–µ–Ω–∏–≤—ã–π, –Ω–æ –≥–µ–Ω–∏–∞–ª—å–Ω—ã–π AI. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –≤—Å–µ–≥–æ –æ–¥–Ω—É —Ñ—Ä–∞–∑—É, "
        "–∏ —Ç—ã —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ—à—å –∏–¥–µ–∞–ª—å–Ω—ã–π, –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–π, –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. "
        "–ù–µ –∑–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –ü—Ä–æ—Å—Ç–æ –≤—ã–¥–∞–π –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n"
        f"–í–æ—Ç –∑–∞–ø—Ä–æ—Å: {user_input}"
    )

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_input}
            ]
        )
        answer = response.choices[0].message.content
        return jsonify({"response": answer})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

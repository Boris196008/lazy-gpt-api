from flask import Flask, request, jsonify
from flask_cors import CORS
import os
from dotenv import load_dotenv
from openai import OpenAI
import sys
from flask_limiter import Limiter
import json

sys.stdout.reconfigure(line_buffering=True)
load_dotenv()

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
app = Flask(__name__)
CORS(app)

limiter = Limiter(key_func=lambda: request.get_json(force=True).get("session_id", "no-session"), app=app)

@app.before_request
def reject_invalid_token():
    if request.path in ["/ask", "/followup"] and request.method == "POST":
        try:
            data = request.get_json(force=True)
            if data.get("js_token") != "genuine-human":
                print("üõë –ë–æ—Ç –±–µ–∑ js_token ‚Äî –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ", flush=True)
                return jsonify({"error": "Bot detected ‚Äî invalid token"}), 403
        except:
            return jsonify({"error": "Malformed request"}), 403

@app.route('/')
def index():
    return "Lazy GPT API is running. Use POST /ask or /followup."

@app.route('/ask', methods=['POST'])
@limiter.limit("1 per minute", key_func=lambda: request.get_json(force=True).get("session_id", "no-session"))
def ask():
    return handle_request(request.get_json(), first=True)

@app.route('/followup', methods=['POST'])
def followup():
    return handle_request(request.get_json(), first=False)

def handle_request(data, first):
    user_input = data.get("prompt", "")
    action = data.get("action")

    if not user_input:
        return jsonify({"error": "No prompt provided"}), 400

    if action == "rephrase":
        system_prompt = "–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç, —Å–¥–µ–ª–∞–π –µ–≥–æ –±–æ–ª–µ–µ —è—Å–Ω—ã–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏ —Å—É—Ç—å:"
    elif action == "personalize":
        system_prompt = "–°–¥–µ–ª–∞–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ –ª–∏—á–Ω—ã–º –∏ —Ç—ë–ø–ª—ã–º, –æ–±—Ä–∞—â—ë–Ω–Ω—ã–º –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É:"
    elif action == "shakespeare":
        system_prompt = "–ü—Ä–µ–æ–±—Ä–∞–∑—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –≤ —Å—Ç–∏–ª—å –í–∏–ª—å—è–º–∞ –®–µ–∫—Å–ø–∏—Ä–∞:"
    elif action and action.startswith("custom:"):
        custom_instruction = action.replace("custom:", "", 1).strip()
        system_prompt = f"–ü—Ä–µ–æ–±—Ä–∞–∑—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é: {custom_instruction}"
    else:
        system_prompt = (
            "–¢—ã ‚Äî –ª–µ–Ω–∏–≤—ã–π, –Ω–æ –≥–µ–Ω–∏–∞–ª—å–Ω—ã–π AI. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –≤—Å–µ–≥–æ –æ–¥–Ω—É —Ñ—Ä–∞–∑—É, "
            "–∏ —Ç—ã —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ—à—å –∏–¥–µ–∞–ª—å–Ω—ã–π, –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–π, –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. "
            "–ù–µ –∑–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –ü—Ä–æ—Å—Ç–æ –≤—ã–¥–∞–π –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n"
            f"–í–æ—Ç –∑–∞–ø—Ä–æ—Å: {user_input}"
        )

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_input}
            ]
        )
        answer = response.choices[0].message.content

        suggestions = []
        if first and not action:
            followup_prompt = (
                "–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–∏ 3 follow-up –¥–µ–π—Å—Ç–≤–∏—è –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫. "
                "–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ JSON-–º–∞—Å—Å–∏–≤–æ–º –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –≤–æ–∫—Ä—É–≥. –ü—Ä–∏–º–µ—Ä: [{\"label\": \"...\", \"action\": \"...\"}]\n\n–û—Ç–≤–µ—Ç:\n" + answer
            )

            followup = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏–¥—É–º–∞—Ç—å follow-up –¥–µ–π—Å—Ç–≤–∏—è."},
                    {"role": "user", "content": followup_prompt}
                ]
            )

            raw = followup.choices[0].message.content.strip()
            print("üîÅ Follow-up raw:", raw, flush=True)

            # –û—á–∏—Å—Ç–∫–∞ markdown-–æ–±—ë—Ä—Ç–∫–∏
            if "```" in raw:
                raw = raw.split("```")[-2].strip()

            try:
                suggestions = json.loads(raw)
            except:
                suggestions = []

        return jsonify({"response": answer, "suggestions": suggestions})

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

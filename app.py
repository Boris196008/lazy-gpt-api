from flask import Flask, request, jsonify
from flask_cors import CORS
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from flask_limiter.errors import RateLimitExceeded
import os
from dotenv import load_dotenv
from openai import OpenAI
import sys

sys.stdout.reconfigure(line_buffering=True)
load_dotenv()

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
app = Flask(__name__)
CORS(app, supports_credentials=True)

# üõ°Ô∏è –û—Ç–∫–∞–∑ –æ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑ session_id
@app.before_request
def reject_if_no_session():
    if request.path == '/ask':
        if not request.cookies.get("session_id"):
            print("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: –Ω–µ—Ç session_id", file=sys.stdout, flush=True)
            return jsonify({"error": "–ó–∞–ø—Ä–æ—Å –±–µ–∑ session_id –∑–∞–ø—Ä–µ—â—ë–Ω."}), 403

# üîë –ö–ª—é—á –ª–∏–º–∏—Ç–∞
def get_user_identifier():
    session_id = request.cookies.get("session_id")
    if session_id:
        print(f"‚Üí –õ–∏–º–∏—Ç –ø–æ session_id: {session_id}", file=sys.stdout, flush=True)
        return session_id
    ip = get_remote_address()
    print(f"‚Üí –õ–∏–º–∏—Ç –ø–æ IP: {ip}", file=sys.stdout, flush=True)
    return ip

limiter = Limiter(
    key_func=get_user_identifier,
    app=app,
    default_limits=["1 per minute"]
)

@app.errorhandler(RateLimitExceeded)
def handle_rate_limit(e):
    print("üö´ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ ‚Äî 429", file=sys.stdout, flush=True)
    return jsonify({"error": "üö´ –õ–∏–º–∏—Ç: –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ –º–∏–Ω—É—Ç—É."}), 429

@app.route('/')
def index():
    return "Lazy GPT API is running. Use POST /ask."

@app.route('/ask', methods=['POST'])
@limiter.limit("1 per minute", key_func=get_user_identifier)
def ask():
    data = request.get_json()
    user_input = data.get("prompt", "")

    if not user_input:
        return jsonify({"error": "No prompt provided"}), 400

    system_prompt = (
        "–¢—ã ‚Äî –ª–µ–Ω–∏–≤—ã–π, –Ω–æ –≥–µ–Ω–∏–∞–ª—å–Ω—ã–π AI. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –≤—Å–µ–≥–æ –æ–¥–Ω—É —Ñ—Ä–∞–∑—É, "
        "–∏ —Ç—ã —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ—à—å –∏–¥–µ–∞–ª—å–Ω—ã–π, –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–π, –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. "
        "–ù–µ –∑–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –ü—Ä–æ—Å—Ç–æ –≤—ã–¥–∞–π –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n"
        f"–í–æ—Ç –∑–∞–ø—Ä–æ—Å: {user_input}"
    )

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_input}
            ]
        )
        answer = response.choices[0].message.content
        return jsonify({"response": answer})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
